# Define the model Battlestar
type Battlestar {
  # the id of the Battlestar
  id: ID! # the primary partition key in DynamoDB
  # the name of the Battlestar
  name: String!
}
type Result {
  teamName: String
  round1Heat: Int
  round1Result: Int
  seed: Int
  round2Result: Int
  round3Result: Int
  bib: Int
  firstName: String
  gender: String
  lastName: String
  fullName: String
}

type Race {
  id: ID!
  name: String!
  userId: String!
  wsName: String
  createdAt: String
  updatedAt: String
  results: [Result]
}
# Define the queries
type Query {
  # list all Battlestars
  listBattlestars: [Battlestar]
  listRaces: [Race]
  getRace(id: ID): Race
}
# Define the input to create a Battlestar
input PutBattlestarInput {
  # the name of the Battlestar to create
  name: String!
}

input ResultInput {
  teamName: String
  round1Heat: Int
  round1Result: Int
  seed: Int
  round2Result: Int
  round3Result: Int
  bib: Int
  firstName: String
  gender: String
  lastName: String
  fullName: String
}

input PutRaceInput {
  # the name of the race to create
  name: String!
  # the array of results for each racer
  results: [ResultInput]
}

input UpdateRaceInput {
  id: String!
  name: String!
  results: [ResultInput]
}
# Define the mutations
type Mutation {
  # Create a Battlestar
  putBattlestar(input: PutBattlestarInput): Battlestar
  putRace(input: PutRaceInput): Race
  deleteRace(id: ID!): Race
  updateRace(input: UpdateRaceInput): Race
}

type Subscription {
  addBattleStar: Battlestar @aws_subscribe(mutations: ["putBattlestar"])
  addRace: Race @aws_subscribe(mutations: ["putRace"])
  modifyRace: Race @aws_subscribe(mutations: ["updateRace"])
}
# Define the schema
schema {
  # all the queries
  query: Query
  # all the mutations
  mutation: Mutation
  # all the subscriptions
  subscription: Subscription
}
